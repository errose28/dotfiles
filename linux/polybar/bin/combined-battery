#!/usr/bin/env python3

from __future__ import annotations
import os
import sys
import time
import subprocess
from typing import List
from pathlib import Path

# Icons listed from empty to full.
# Icons are taken from material design icons pack in the fonts dotfiles package.
CHARGING_ICONS = ["", "", "", "", "", "", "", "", "", ""]
DISCHARGING_ICONS = ["", "", "", "", "", "", "", "", "", ""]
# Once the battery reaches this point, it is considered fully charged.
FULL_CHARGE_PERCENT = 98
WARNING_PERCENT = 10

# Created to note that the user has been warned about the current low battery level.
# Deleted when the battery is not at the critical level.
WARNING_FILE = Path(Path().resolve().anchor, 'tmp', 'combined_battery_warned')

POWER_SUPPLY_DIR = Path(Path().resolve().anchor, 'sys', 'class', 'power_supply')

def percent() -> int:
    """
    Returns the percentage full the battery is as an int, with no percent sign.
    """

    num_batteries = 0
    total_percentages = 0

    battery_files = POWER_SUPPLY_DIR.glob(os.path.join('BAT*', 'capacity'))
    for path in battery_files:
        with open(path) as file:
            num_batteries += 1
            total_percentages += int(file.readline())

    return total_percentages // num_batteries

def icon() -> int:
    index = percent() // len(CHARGING_ICONS)
    # If batteries are at 100%, need to clamp index from 10 to 9 so its in bounds.
    index = max(0, min(index, 9))

    if is_charging():
        bat_icon = CHARGING_ICONS[index]
    else:
        bat_icon = DISCHARGING_ICONS[index]

    return bat_icon

def is_charging() -> bool:
    charging = False
    with open(POWER_SUPPLY_DIR / 'AC' / 'online') as file:
        charging = (file.readline().strip() == '1')

    return charging

def cmd_output(cmd: List[str]) -> str:
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].decode().strip()

def warn_if_needed(percentage: int) -> None:
    is_warning_file = os.path.isfile(WARNING_FILE)

    if percentage <= WARNING_PERCENT and not is_warning_file:
        cmd_output(['notify-send', '-u', 'critical', 'LOW BATTERY: ' + str(percentage) + '%'])
        # Create, open, then close the file so no new notifications are posted
        #   until the battery crosses above then below the threshold.
        with open(WARNING_FILE, 'w') as _: pass
    elif percentage > WARNING_PERCENT and is_warning_file:
        os.remove(WARNING_FILE)

def main():
    percentage = percent()
    warn_if_needed(percentage)
    result = "{0}{1:>3}%".format(icon(), percent())
    print(result)

if __name__ == '__main__':
    main()
