#!/usr/bin/env sh

# Script for updating bspwm output in polybar using ipc.

### CONFIG ###

SEP='  '
FOCUSED_COLOR='#ffffff'
ACTIVE_COLOR='#bfbfbf'
CACHE_DIR=~/.cache/polybar-desktops

### OUTPUT CONSTRUCTION ###

build_status_for_desktop() {
    local monitor="$1"
    local desktop="$2"
    # Optional, will be computed if needed and not passed.
    local layout="$3"

    local window_count="$(bspc query --nodes --desktop "$desktop" --node '.window.!hidden' | wc -l)"
    local hidden_count="$(bspc query --nodes --desktop "$desktop" --node .window.hidden | wc -l)"
    local marked_count="$(bspc query --nodes --desktop "$desktop" --node .marked | wc -l)"
    local name="$(bspc query --desktops --desktop "$desktop" --names)"

    # Compute desktop status.
    local desktop_status="$name"
    # If more information is appended to the desktop status, this is the separator it should use before appending.
    local next_sep=' '
    if [ "$window_count" -gt 0 ]; then
        # In monocle mode, show index of the current window as well.
        [ "$layout" ] || local layout="$(bspc query --tree --desktop "$desktop" | jq -r '.layout')"
        if [ "$layout" = 'monocle' ]; then
            # Get the focused node (or the node that would be focused if the desktop were active).
            # Cannot use .focused to select node because the desktop may not be focused when this is run.
            focused_node="$(bspc query --nodes --node @"$desktop": --node .window)"
            index="$(bspc query --nodes --desktop "$desktop" --node '.window.!hidden' | awk "/"$focused_node"/{print NR}")"
            window_count="$index/$window_count"
        fi
        desktop_status="${desktop_status}${next_sep}[$window_count]"
        next_sep=''
    fi

    if [ "$hidden_count" -gt 0 ]; then
        desktop_status="${desktop_status}${next_sep}($hidden_count)"
        next_sep=''
    fi

    if [ "$marked_count" -gt 0 ]; then
        desktop_status="${desktop_status}${next_sep}*"
        next_sep=''
    fi

    echo "$desktop_status" > "$CACHE_DIR/${monitor}_${desktop}_desktop"
}

# Gather all desktop output files for the current monitor, and construct polybar output.
build_status_for_monitor() {
    monitor="$1"

    local focused_desktops="$(bspc query --desktops --desktop .focused)"
    local active_desktops="$(bspc query --desktops --desktop .active)"

    all_statuses=''
    for desktop in $(bspc query --desktops --monitor "$monitor"); do
        if [ "$all_statuses" ]; then
            all_statuses="${all_statuses}${SEP}"
        fi
        
        # If there's no existing status for this desktop, create it now.
        # Could happen if this daemon was started during an existing session with desktops.
        if [ ! -f "$CACHE_DIR/${monitor}_${desktop}_desktop" ]; then
            build_status_for_desktop "$monitor" "$desktop"
        fi
        desktop_status="$(cat "$CACHE_DIR/${monitor}_${desktop}_desktop")"

        # Apply polybar formatting to mark focused or active.
        # Cannot be saved to the desktop file since there is no bspwm event to remove focus/active.
        if echo "$focused_desktops" | grep -q "$desktop"; then
            desktop_status="%{B#ffffff}%{F#000000}${desktop_status}%{F-}%{B-}"
        elif echo "$active_desktops" | grep -q "$desktop"; then
            desktop_status="%{+u}%{u${ACTIVE_COLOR}}${desktop_status}%{-u}"
        else
            desktop_status="%{+u}%{u${ACTIVE_COLOR}}%{F${ACTIVE_COLOR}}${desktop_status}%{-u}%{F-}"
        fi

        all_statuses="${all_statuses}${desktop_status}"

        # TODO: Garbage collect output files from deleted desktops.
        #    Make desktop or monitor the prefix for easier searching.
        #    Make function to build output file names.
    done

    # Atomic update of output file using monitor name for polybar to read.
    local monitor_name="$(bspc query --monitors --monitor "$monitor" --names)"
    echo "$all_statuses" > "$CACHE_DIR/${monitor_name}_tmp"
    mv "$CACHE_DIR/${monitor_name}_tmp" "$CACHE_DIR/${monitor_name}_monitor"

    # Push updated monitor format to polybar.
    polybar-msg hook bspwm-custom 1 > /dev/null
}

### EVENT REGISTRATION ###

desktop_add() {
    monitor_id="$1"
    desktop_id="$2"
    desktop_name="$3"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

desktop_rename() {
    monitor_id="$1"
    desktop_id="$2"
    desktop_name="$3"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

# TODO: Once garbage collection is implemented, do not need this.
desktop_remove() {
    monitor_id="$1"
    desktop_id="$2"

    rm "$CACHE_DIR/${monitor_id}_${desktop_id}_desktop"
}

# TODO: check if desktop files need to be deleted here.
desktop_swap() {
    src_monitor_id="$1"
    src_desktop_id="$2"
    dst_monitor_id="$3"
    dst_desktop_id="$4"

    build_status_for_desktop "$src_monitor_id" "$src_desktop_id"
    build_status_for_desktop "$dst_monitor_id" "$dst_desktop_id"
    build_status_for_monitor "$src_monitor_id"
    if [ "$src_monitor_id" != "$dst_monitor_id" ]; then
        build_status_for_monitor "$dst_monitor_id"
    fi
}

# TODO: check if desktop files need to be deleted here.
desktop_transfer() {
    src_monitor_id="$1"
    src_desktop_id="$2"
    dst_monitor_id="$3"

    build_status_for_desktop "$src_monitor_id" "$src_desktop_id"
    build_status_for_desktop "$src_monitor_id" "$dst_desktop_id"

    build_status_for_monitor "$src_monitor_id"
}

desktop_focus() {
    monitor_id="$1"
    desktop_id="$2"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

desktop_activate() {
    monitor_id="$1"
    desktop_id="$2"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}


desktop_layout() {
    monitor_id="$1"
    desktop_id="$2"
    # 'tiled' or 'monocle'.
    layout="$3"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

node_add() {
    monitor_id="$1"
    desktop_id="$2"
    ip_id="$3"
    node_id="$4"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

node_remove() {
    monitor_id="$1"
    desktop_id="$2"
    node_id="$3"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

node_swap() {
    src_monitor_id="$1"
    src_desktop_id="$2"
    src_node_id="$3"
    dst_monitor_id="$4"
    dst_desktop_id="$5"
    dst_node_id="$6"

    build_status_for_desktop "$src_monitor_id" "$src_desktop_id"
    build_status_for_desktop "$dst_monitor_id" "$dst_desktop_id"
    build_status_for_monitor "$src_monitor_id"
    if [ "$src_monitor_id" != "$dst_monitor_id" ]; then
        build_status_for_monitor "$dst_monitor_id"
    fi
}

node_transfer() {
    src_monitor_id="$1"
    src_desktop_id="$2"
    src_node_id="$3"
    dst_monitor_id="$4"
    dst_desktop_id="$5"
    dst_node_id="$6"

    build_status_for_desktop "$src_monitor_id" "$src_desktop_id"
    build_status_for_desktop "$dst_monitor_id" "$dst_desktop_id"
    build_status_for_monitor "$src_monitor_id"
    if [ "$src_monitor_id" != "$dst_monitor_id" ]; then
        build_status_for_monitor "$dst_monitor_id"
    fi
}

node_focus() {
    monitor_id="$1"
    desktop_id="$2"
    node_id="$3"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

node_activate() {
    monitor_id="$1"
    desktop_id="$2"
    node_id="$3"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

node_flag() {
    monitor_id="$1"
    desktop_id="$2"
    node_id="$3"
    # hidden|sticky|private|locked|marked|urgent
    flag_type="$4"
    flag_value="$5"

    build_status_for_desktop "$monitor_id" "$desktop_id"
    build_status_for_monitor "$monitor_id"
}

init() {
    rm -f "$CACHE_DIR"/*
    mkdir -p "$CACHE_DIR"

    # Generate initial output to show before any events are fired.
    for monitor_id in $(bspc query --monitors); do
        for desktop_id in $(bspc query --desktops --monitor "$monitor_id"); do
            build_status_for_desktop "$monitor_id" "$desktop_id"
        done
        build_status_for_monitor "$monitor_id"
    done
}

declare -f "$1" &> /dev/null && $@

