#!/usr/bin/env sh

### BEGIN FUNCTION DEFINITIONS ###

get_device_path() {
    local dev_or_label="$1"

    # Use path on its own to point to block device if it is valid.
    if [ -b "$dev_or_label" ]; then
        echo "$dev_or_label"
    else
        local dev_path=/dev/disk/by-label/"$dev_or_label"
        if [ -b "$dev_path" ]; then
            echo "$dev_path"
        else
            echo "Unable to match $dev_or_label to a block device path or device label." 1>&2
        fi
    fi
}

is_mounted() {
    # Use realpath to resolve the symlink to the actual /dev block device,
    # which will show up in the mount output.
    mount | grep -q "$(realpath "$dev_path")"
}

### END FUNCTION DEFINITIONS ###

cmd="$1"
dev_or_label="$2"
mount_options="$3"

if [ "$dev_or_label" ]; then
    dev_path="$(get_device_path "$dev_or_label")"
fi

if [ "$cmd" = "ls" ]
then
    # use grep to discard the snap loops listed by lsblk.
    lsblk -po label,name,fstype,mountpoint,model,size | grep -vE "loop"
elif [ "$cmd" = "mount" ]
then
    udisksctl mount --options "$mount_options" --block-device "$dev_path"
elif [ "$cmd" = "unmount" ]
then
    udisksctl unmount --block-device "$dev_path"
elif [ "$cmd" = "eject" ]
then
    is_mounted && udisksctl unmount --block-device "$dev_path"
    udisksctl power-off --block-device "$dev_path"
elif [ "$cmd" = "devpath" ]
then
    echo "$dev_path"
elif [ "$cmd" = "ismounted" ]
then
    # Return code of this function is returned by last line in script.
    is_mounted
else
    echo "devices: Unknown command: $cmd" 1>&2
    exit 1
fi

exit "$?"
