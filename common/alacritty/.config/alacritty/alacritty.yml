# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Only fields whose default values wer modified are here.
# See https://github.com/alacritty/alacritty/blob/master/alacritty.yml for all possible fields.

import:
  - ~/.config/alacritty/macos.yml
  - ~/.config/alacritty/linux.yml

window:
  dynamic_title: true

# Font configuration
font:
  normal:
    # Font for powerlevel10k theme
    family: "MesloLGS NF"
    # The `style` can be specified to pick a specific face.
    style: Regular

  bold:
    style: Bold

  italic:
    style: Italic

  bold_italic:
    style: Bold Italic

colors:
  # Default colors
  primary:
    # # Bright and dim foreground colors
    # #
    # # The dimmed foreground color is calculated automatically if it is not present.
    # # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # # is `false`, the normal foreground color will be used.
    # dim_foreground: '#9a9a9a'
    # bright_foreground: '#ffffff'

    background: '#1d1f21'
    foreground: '#c5c8c6'

  # These 16 colors correspond to the 015 color defaults.
  # Normal colors
  normal:
    black:   '#1d1f21'
    red:     '#a54242'
    green:   '#8c9440'
    yellow:  '#977325'
    blue:    '#5f819d'
    magenta: '#85678f'
    cyan:    '#06989a'
    white:   '#c5c8c6'

  # Bright colors
  bright:
    black:   '#555753'
    red:     '#ef2929'
    green:   '#4e9a06'
    yellow:  '#f0c674'
    blue:    '#729fcf'
    magenta: '#ad7fa8'
    cyan:    '#34e2e2'
    white:   '#eeeeec'

# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
# Set just below 1 due to MacOS OpenGL bug that makes opening mission control from Alacritty slow.
#   See https://github.com/alacritty/alacritty/issues/4410
background_opacity: 0.999

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - â–‡ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

mouse:
  hide_when_typing: true


# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - mouse: Right
    action: Copy

  # If nothing is selected, PasteSelection will paste whatever is in the clipboard.
  - mouse: Middle
    action: PasteSelection

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # Change font size:
  - key: Key0
    mods: Control
    action: ResetFontSize

  - key: Equals
    mods: Control
    action: IncreaseFontSize

  - key: Plus
    mods: Control
    action: IncreaseFontSize

  - key: NumpadAdd
    mods: Control
    action: IncreaseFontSize

  - key: NumpadSubtract
    mods: Control
    action: DecreaseFontSize

  - key: Minus
    mods: Control
    action: DecreaseFontSize

  # Copy and paste:
  - key: V
    mods: Control|Alt
    action: Paste

  - key: C
    mods: Control|Alt
    action: Copy

  # Scrolling
  - key: K
    mods: Control
    action: ScrollLineUp

  - key: J
    mods: Control
    action: ScrollLineDown

  - key: G
    mods: Control
    action: ScrollToBottom

  - key: G
    mods: Control|Shift
    action: ScrollToTop

  ### TMUX KEY BINDINGS ###

  # Duplicate of tmux key bindings, but can use ctrl alt as modifier keys without weird tmux bugs excluding certain key configurations.
  # If the focus is changed to a different tmux session in a different terminal, the commands will operate on the previously focused session until a command is sent to the current tmux session.
  # Can just enter the tmux prefix to restore focus.
  - key: H
    mods: Control|Alt
    command: { program: "tmux", args: ["previous-window"] }

  - key: L
    mods: Control|Alt
    command: { program: "tmux", args: ["next-window"] }

  - key: H
    mods: Control|Alt|Shift
    command: { program: "tmux", args: ["swap-window", "-t", "-1", ";", "select-window", "-t", "-1"] }

  - key: L
    mods: Control|Alt|Shift
    command: { program: "tmux", args: ["swap-window", "-t", "+1", ";", "select-window", "-t", "+1"] }

  - key: Tab
    mods: Control|Alt
    command: { program: "tmux", args: ["last-window"] }

  - key: Q
    mods: Control|Alt
    command: { program: "tmux", args: ["killw"] }

  # Alias for killing windows that is on the other side of the keyboard.
  - key: Minus
    mods: Control|Alt
    command: { program: "tmux", args: ["killw"] }

  - key: Return
    mods: Control|Alt
    command: { program: "tmux", args: ["new-window"] }

  - key: Return
    mods: Control|Alt|Shift
    command: { program: "tmux", args: ["new-window", "-c", "#{pane_current_path}"] }

  - key: T
    mods: Control|Alt
    command: { program: "tmux", args: ["new-window"] }

  - key: T
    mods: Control|Alt|Shift
    command: { program: "tmux", args: ["new-window", "-c", "#{pane_current_path}"] }

  - key: R
    mods: Control|Alt
    command: { program: "tmux", args: ["source-file", "~/.tmux.conf"] }

  - key: Slash
    mods: Control|Alt
    command: { program: "tmux", args: ["command-prompt", "rename-window '%%'"]  }

  - key: Slash
    mods: Control|Alt|Shift
    command: { program: "tmux", args: ["command-prompt", "rename-session '%%'"] }

debug:
  # Keep the log file after quitting Alacritty.
  persistent_logging: true

  log_level: Warn
