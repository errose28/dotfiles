Add to library general alias keyword that takes ops as arguments.

In some general init file, there is a mapping from tags to strings.

Each arg is converted based on the tags, and teh resulting keyword is run.


option 1: keywords to strings mapping.
    ex. `Convert  Install  xorg.xinput` hit when tag arch is passed in.

    - User has previously defined a mapping of `(arch, Install) -> sudo pacman -S` and `(arch, xorg.xinput) -> xorg-xinput`

    - Result is that the command `sudo pacman -S xorg.xinput` is run.

option 2: Each tag has a callback interface registered.
    ex. `Convert  Install  xorg.xinput` hit when tag arch is passed in.

    - arch interface with whatever keywords is registered somehow.
    - Dotfiles library `Convert` sees tag arch was passed in, so it calls `Install xorg.xinput` on the arch interface.
    - Arch interface can maintain a mapping of transformations, for example, xorg.xinput -> xorg-xinput.

option 3: Similar to option 2 but use RF listener.
    ex. `Abstract  Install  xorg.xinput` hit when tag arch is passed in.

    - Abstract is defined as an empty keyword in DF library.
    - Caller registers a listener when calling robot.
    - Listener can listen on Abstract and act accordingly.
    - Maximum listener flexibility since implemented in python.
    - Can implement package name subs as a dictionary, where each possible name is mapped to the actual name.

    - Ideally, listener could just define Install and it would be called,
      instead of mapping each possible value passed in to Abstract to a method.

    ```
    # Will have some boilerplate in every listener:
    def start_keyword(name, attrs):
        if name == 'DotfilesLibrary.Abstract':
            if attrs['args'][0] == 'Install':
                install(*args[1:])
            # OR
            eval attrs['args'][0]
            
    def install() ...
    ```

    - Can put all listeners in a separate repo to install with pip so boilerplate is shared on one file.
    - Listener can be a class to inherit this functionality.
