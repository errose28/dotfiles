#!/usr/bin/env sh

# TODO: Fix this to work by skipping multiple spaces, and focusing empty spaces.

# Focuses the last used window in the specified space. If no space is specified, uses the current space.
# Use `yabai -m window --focus recent` to focus last used window regardless of space.
# Use `yabai -m space --focus recent` to do the same as this script, but requires yabai's scripting addition.

target_index="$1"

# Set variables with info about the target space.
eval $(yabai -m query --spaces --space "$target_index" | jq -r '"
target_index=\(.index);
target_display=\(.display);
target_focused=\(."has-focus")
target_win_count=\(.windows | length)
"')

# If the space has no windows, we must get to it by triggering swipes through
# the spaces in between. This is slower than focusing a window if the space had one.
if [ "$target_win_count" = 0 ]; then
    # Set variables with info about how to get to the target space from the
    # visible space on its display.
    eval $(yabai -m query --spaces | jq -r \
    --argjson target_index "$target_index" \
    --argjson target_display "$target_display" '"
    .[] | select(.display == $target_display and ."is-visible") |
    ($target_index - .index) as $diff  | "
    iters=\($diff | length)
    direction=\(if $diff > 0 then "right" else "left" end)
    "')

    yabai -m display --focus "$target_display"

    for i in $(seq $iters); do
        skhd -k "ctrl - $direction"
    done
else
    win_index=0
    if [ "$target_focused" = 'true' ]; then
        win_index=1
    fi

    # Windows are listed in order used, with current window first.
    # Skip floating windows.
    win_id="$(yabai -m query --windows --space "$target_index" | jq -r --argjson win_index "$win_index" '[.[] | select(."is-floating"==false)] | .[$win_index].id')"
    yabai -m window --focus "$win_id"
fi

